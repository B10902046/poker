from game.players import BasePokerPlayer

class CallPlayer(
    BasePokerPlayer
):  # Do not forget to make parent class as "BasePokerPlayer"
    def __init__(self, num_actions=8):
        self.ta_bb_call = 0
        self.ta_sb_raise = 0
        self.ta_sb_allin_call = 0
        self.ta_sb_allin = 0
        self.total_round = 0
        self.SB = False

    #  we define the logic to make an action through this method. (so this method would be the core of your AI)
    def declare_action(self, valid_actions, hole_card, round_state):
        # valid_actions format => [fold_action_info, call_action_info, raise_action_info]
        if (self.SB):
            action, amount = valid_actions[2]["action"], valid_actions[2]["amount"]["max"]
        else:
            if (valid_actions[2]["amount"] < 0):
                action, amount = valid_actions[1]["action"], valid_actions[1]["amount"]
            else:
                action, amount = valid_actions[2]["action"], valid_actions[2]["amount"]["max"]
    return action, amount  # action returned here is sent to the poker engine

    def receive_game_start_message(self, game_info):
        if game_info["seats"][0]["uuid"]==self.uuid:
            self.index=0
        else:
            self.index=1

    def receive_round_start_message(self, round_count, hole_card, seats):
        print(f"round count: {round_count}")
        if (round_count % 2 == 1):
            if self.index == 0:
                self.SB = True
                print("I am SB")
            else:
                self.SB = False
                print("I am BB")
        else:
            if self.index == 1:
                self.SB = True
                print("I am SB")
            else:
                self.SB = False
                print("I am BB")

    def receive_street_start_message(self, street, round_state):
        pass

    def receive_game_update_message(self, action, round_state):
        pass

    def receive_round_result_message(self, winners, hand_info, round_state):
        print(round_state['action_histories']['preflop'])
        self.total_round += 1
        if (self.SB):
            if (round_state['action_histories']['preflop'][3]['action'] == 'CALL'):
                print("TA(BB) CALL!")
                self.ta_bb_call += 1
        else:
            if (round_state['action_histories']['preflop'][3]['action'] == 'CALL'):
                self.ta_sb_allin += 1
            elif (round_state['action_histories']['preflop'][2]['action'] != 'FOLD'):
                self.ta_sb_raise += 1
                if (round_state['action_histories']['preflop'][4]['action'] == 'CALL'):
                    self.ta_sb_allin_call += 1
        print(f"ta_bb_call = {self.ta_bb_call / self.total_round}")
        print(f"ta_sb_raise = {self.ta_sb_raise / self.total_round}")
        print(f"ta_sb_allin_call = {self.ta_sb_allin_call / self.total_round}")
        print(f"ta_sb_allin = {self.ta_sb_allin / self.total_round}")


def setup_ai():
    return CallPlayer()
