from game.players import BasePokerPlayer

def get_num(half_card):
    if half_card == 'A':
        return 1
    if half_card == '2':
        return 2
    if half_card == '3':
        return 3
    if half_card == '4':
        return 4
    if half_card == '5':
        return 5
    if half_card == '6':
        return 6
    if half_card == '7':
        return 7
    if half_card == '8':
        return 8
    if half_card == '9':
        return 9
    if half_card == 'T':
        return 10
    if half_card == 'J':
        return 11
    if half_card == 'Q':
        return 12
    if half_card == 'K':
        return 13




def check_sb_allin(hole_card):
    card1 = hole_card[0]
    card2 = hole_card[1]
    num1 = get_num(card1)
    num2 = get_num(card2)
    a = min(num1, num2)
    b = max(num1, num2)
    samne_flower = False
    if hole_card[0][0] == hole_card[1][0]:
        samne_flower = True
    if (a == 1):
        if b in [13,12,11, 10, 9]:
            return True
        if b in [10,5,7,8,9] and samne_flower:
            return True
    if a == b and a >= 5:
        return True
    if samne_flower:
        if b == 13 and a in [10,11,12]:
            return True
    if b == 13 and a in [11,12]:
        return True
    return False

def check_bb_allin(hole_card):
    card1 = hole_card[0]
    card2 = hole_card[1]
    num1 = get_num(card1)
    num2 = get_num(card2)
    a = min(num1, num2)
    b = max(num1, num2)
    samne_flower = False
    if a == b and a >= 6:
        return True
    if a == 1 and b in [12,13,11] and samne_flower:
        return True
    if a == 1 and b in [12,13]:
        return True
    return False




def check_bb_call_allin(hole_card):
    card1 = hole_card[0]
    card2 = hole_card[1]
    num1 = get_num(card1)
    num2 = get_num(card2)
    a = min(num1, num2)
    b = max(num1, num2)
    samne_flower = False
    if a == b and a >= 10:
        return True
    if a == 1 and b in [12,13] and samne_flower:
        return True
    if a == 1 and b in [13]:
        return True
    return False

class CallPlayer(
    BasePokerPlayer
):  # Do not forget to make parent class as "BasePokerPlayer"

    #  we define the logic to make an action through this method. (so this method would be the core of your AI)
    def declare_action(self, valid_actions, hole_card, round_state):
        if len(round_state['community_card']) == 0:
            if (self.SB):
                if (check_sb_allin):
                    action, amount = valid_actions[2]["action"], valid_actions[2]["amount"]["max"]
                else:
                    action, amount = valid_actions[0]["action"], valid_actions[0]["amount"]
            else:
                # BB
                if (valid_actions[2]["amount"]["max"] > 0):
                    if(check_bb_allin):
                        action, amount = valid_actions[2]["action"], valid_actions[2]["amount"]["max"]
                    else:
                        action, amount = valid_actions[0]["action"], valid_actions[0]["amount"]
                else:
                    if (check_bb_call_allin):
                        action, amount = valid_actions[1]["action"], valid_actions[1]["amount"]
                    else:
                        action, amount = valid_actions[0]["action"], valid_actions[0]["amount"]
        
        return action, amount  # action returned here is sent to the poker engine

    def receive_game_start_message(self, game_info):
        self.SB = False
        if game_info["seats"][0]["uuid"]==self.uuid:
            self.index=0
        else:
            self.index=1

    def receive_round_start_message(self, round_count, hole_card, seats):
        print(f"round count: {round_count}")
        if (round_count % 2 == 0):
            if self.index == 0:
                self.SB = True
                print("I am SB")
            else:
                self.SB = False
                print("I am BB")
        else:
            if self.index == 1:
                self.SB = True
                print("I am SB")
            else:
                self.SB = False
                print("I am BB")

    def receive_street_start_message(self, street, round_state):
        pass

    def receive_game_update_message(self, action, round_state):
        pass

    def receive_round_result_message(self, winners, hand_info, round_state):
        pass


def setup_ai():
    return CallPlayer()
